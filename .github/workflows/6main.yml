name: Build Release x64 - Robust Alternative  
  
on:  
  push:  
    branches: [ main, master ]  
  pull_request:  
    branches: [ main, master ]  
  
jobs:  
  build:  
    runs-on: windows-2022  
      
    steps:  
    - name: Checkout code  
      uses: actions/checkout@v4  
      
    - name: Setup MSBuild  
      uses: microsoft/setup-msbuild@v2  
      
    - name: Cache vcpkg installed packages  
      uses: actions/cache@v4  
      with:  
        path: C:\vcpkg\installed  
        key: vcpkg-robust-${{ runner.os }}-x64-${{ hashFiles('vc14/**/*.vcxproj', 'src/**/*.h', 'src/**/*.cpp') }}  
        restore-keys: |  
          vcpkg-robust-${{ runner.os }}-x64-  
          vcpkg-robust-${{ runner.os }}-  
      
    - name: Cache vcpkg downloads  
      uses: actions/cache@v4  
      with:  
        path: C:\vcpkg\downloads  
        key: vcpkg-downloads-${{ runner.os }}-${{ github.run_id }}  
        restore-keys: |  
          vcpkg-downloads-${{ runner.os }}-  
      
    - name: Cache vcpkg buildtrees  
      uses: actions/cache@v4  
      with:  
        path: C:\vcpkg\buildtrees  
        key: vcpkg-buildtrees-${{ runner.os }}-x64-${{ github.sha }}  
        restore-keys: |  
          vcpkg-buildtrees-${{ runner.os }}-x64-  
      
    - name: Cache MSBuild outputs  
      uses: actions/cache@v4  
      with:  
        path: |  
          vc14/x64/Release  
          vc14/.vs  
        key: msbuild-${{ runner.os }}-${{ hashFiles('vc14/**/*.vcxproj', 'vc14/**/*.props', 'src/**/*.cpp', 'src/**/*.h') }}  
        restore-keys: |  
          msbuild-${{ runner.os }}-  
      
    - name: Setup vcpkg with specific commit  
      run: |  
        git clone https://github.com/Microsoft/vcpkg.git C:\vcpkg  
        cd C:\vcpkg  
        # Usar commit específico conhecido por funcionar com VS2022  
        git checkout 2024.01.12  
        .\bootstrap-vcpkg.bat  
        .\vcpkg integrate install  
      
    - name: Install dependencies with corrected fallback strategy  
      run: |  
        # Instalar dependências principais primeiro  
        C:\vcpkg\vcpkg install pugixml:x64-windows  
        C:\vcpkg\vcpkg install fmt:x64-windows  
        C:\vcpkg\vcpkg install boost-asio:x64-windows  
        C:\vcpkg\vcpkg install boost-system:x64-windows  
        C:\vcpkg\vcpkg install boost-filesystem:x64-windows  
        C:\vcpkg\vcpkg install boost-iostreams:x64-windows  
        C:\vcpkg\vcpkg install boost-variant:x64-windows  
        C:\vcpkg\vcpkg install boost-lockfree:x64-windows  
        C:\vcpkg\vcpkg install luajit:x64-windows  
        C:\vcpkg\vcpkg install libmariadb:x64-windows  
        C:\vcpkg\vcpkg install mpir:x64-windows  
          
        # Estratégia 1: Tentar versão HEAD do Crypto++  
        Write-Host "Tentando Crypto++ HEAD version..."  
        $cryptoSuccess = $false  
        try {  
          C:\vcpkg\vcpkg install cryptopp:x64-windows --head --no-binarycaching  
          if (Test-Path "C:\vcpkg\installed\x64-windows\include\cryptopp") {  
            $cryptoSuccess = $true  
            Write-Host "✓ Crypto++ HEAD instalado com sucesso"  
          }  
        }  
        catch {  
          Write-Host "Estratégia 1 falhou: $($_.Exception.Message)"  
        }  
          
        if (-not $cryptoSuccess) {  
          Write-Host "Estratégia 1 falhou, tentando estratégia 2..."  
            
          # Estratégia 2: Usar commit mais antigo do vcpkg  
          cd C:\vcpkg  
          git fetch --tags  
          git checkout 2023.04.15  # Usar commit conhecido que existe  
          .\bootstrap-vcpkg.bat  
          .\vcpkg integrate install  
            
          try {  
            C:\vcpkg\vcpkg remove cryptopp:x64-windows --recurse 2>$null  
            C:\vcpkg\vcpkg install cryptopp:x64-windows --no-binarycaching  
            if (Test-Path "C:\vcpkg\installed\x64-windows\include\cryptopp") {  
              $cryptoSuccess = $true  
              Write-Host "✓ Crypto++ com vcpkg antigo instalado com sucesso"  
            }  
          }  
          catch {  
            Write-Host "Estratégia 2 também falhou: $($_.Exception.Message)"  
          }  
        }  
          
        # Verificar resultado final  
        if (Test-Path "C:\vcpkg\installed\x64-windows\include\cryptopp") {  
          Write-Host "✓ Crypto++ headers encontrados"  
        } else {  
          Write-Host "⚠ Crypto++ headers NÃO encontrados - tentando continuar sem pkgconfig"  
        }  
          
        # Verificar outras dependências críticas  
        if (Test-Path "C:\vcpkg\installed\x64-windows\include\pugixml.hpp") {  
          Write-Host "✓ PugiXML header encontrado"  
        } else {  
          Write-Host "✗ PugiXML header NÃO encontrado"  
          exit 1  
        }  
          
        if (Test-Path "C:\vcpkg\installed\x64-windows\include\fmt") {  
          Write-Host "✓ fmt headers encontrados"  
        } else {  
          Write-Host "✗ fmt headers NÃO encontrados"  
          exit 1  
        }  
      
    - name: Update project configuration  
      run: |  
        # Atualizar Windows SDK  
        (Get-Content vc14\theforgottenserver.vcxproj) -replace '10\.0\.16299\.0', '10.0' | Set-Content vc14\theforgottenserver.vcxproj  
        Write-Host "✓ Windows SDK atualizado"  
      
    - name: Build with multiple fallback strategies  
      run: |  
        Write-Host "Tentando build com configurações otimizadas..."  
          
        # Estratégia 1: Build normal  
        $buildSuccess = $false  
        try {  
          Write-Host "Tentando build padrão..."  
          msbuild vc14\theforgottenserver.sln /p:Configuration=Release /p:Platform=x64 /p:WindowsTargetPlatformVersion=10.0 /p:VcpkgRoot=C:\vcpkg /m /v:minimal  
          if (Test-Path "vc14\x64\Release\theforgottenserver-x64.exe") {  
            $buildSuccess = $true  
            Write-Host "✓ Build bem-sucedido com configuração padrão"  
          }  
        }  
        catch {  
          Write-Host "Build padrão falhou: $($_.Exception.Message)"  
        }  
          
        if (-not $buildSuccess) {  
          Write-Host "Build padrão falhou, tentando sem otimizações..."  
          # Estratégia 2: Desabilitar otimizações que causam conflito  
          try {  
            msbuild vc14\theforgottenserver.sln /p:Configuration=Release /p:Platform=x64 /p:WindowsTargetPlatformVersion=10.0 /p:VcpkgRoot=C:\vcpkg /p:WholeProgramOptimization=false /p:LinkTimeCodeGeneration=false /m  
            if (Test-Path "vc14\x64\Release\theforgottenserver-x64.exe") {  
              $buildSuccess = $true  
              Write-Host "✓ Build bem-sucedido sem otimizações"  
            }  
          }  
          catch {  
            Write-Host "Build sem otimizações falhou: $($_.Exception.Message)"  
          }  
        }  
          
        if (-not $buildSuccess) {  
          Write-Host "Build sem otimizações falhou, tentando com runtime estático..."  
          # Estratégia 3: Usar runtime library estático  
          try {  
            msbuild vc14\theforgottenserver.sln /p:Configuration=Release /p:Platform=x64 /p:WindowsTargetPlatformVersion=10.0 /p:VcpkgRoot=C:\vcpkg /p:RuntimeLibrary=MultiThreaded /m  
            if (Test-Path "vc14\x64\Release\theforgottenserver-x64.exe") {  
              $buildSuccess = $true  
              Write-Host "✓ Build bem-sucedido com runtime estático"  
            }  
          }  
          catch {  
            Write-Host "Build com runtime estático falhou: $($_.Exception.Message)"  
          }  
        }  
          
        if (-not $buildSuccess) {  
          Write-Host "✗ Todas as estratégias de build falharam"  
          exit 1  
        }  
      
    - name: Verify and collect build output  
      run: |  
        if (Test-Path "vc14\x64\Release\theforgottenserver-x64.exe") {  
          Write-Host "✓ Executável gerado com sucesso!"  
          $fileInfo = Get-Item "vc14\x64\Release\theforgottenserver-x64.exe"  
          Write-Host "Tamanho: $($fileInfo.Length) bytes"  
          Write-Host "Data: $($fileInfo.CreationTime)"  
            
          # Verificar dependências do executável  
          Write-Host "Verificando dependências..."  
          try {  
            dumpbin /dependents "vc14\x64\Release\theforgottenserver-x64.exe" | Select-String "\.dll"  
          }  
          catch {  
            Write-Host "Não foi possível verificar dependências com dumpbin"  
          }  
        } else {  
          Write-Host "✗ Executável não foi gerado"  
          exit 1  
        }  
      
    - name: Collect artifacts with diagnostics  
      run: |  
        mkdir artifacts  
        copy vc14\x64\Release\theforgottenserver-x64.exe artifacts\  
        copy vc14\x64\Release\*.dll artifacts\ 2>$null || echo "Nenhuma DLL encontrada"  
        copy vc14\x64\Release\*.pdb artifacts\ 2>$null || echo "Nenhum PDB encontrado"  
          
        # Coletar informações de diagnóstico  
        echo "Build Strategy Used: Multiple fallback strategies" > artifacts\build-info.txt  
        echo "vcpkg Version: 2024.01.12 with fallbacks to 2023.04.15" >> artifacts\build-info.txt  
        echo "Build Date: $(Get-Date)" >> artifacts\build-info.txt  
        echo "Crypto++ Status: $(if (Test-Path 'C:\vcpkg\installed\x64-windows\include\cryptopp') { 'Installed' } else { 'Failed' })" >> artifacts\build-info.txt  
          
        Write-Host "Artefatos coletados:"  
        Get-ChildItem artifacts\ | ForEach-Object { Write-Host "- $($_.Name) ($($_.Length) bytes)" }  
      
    - name: Upload artifacts  
      uses: actions/upload-artifact@v4  
      with:  
        name: baiak-thunder-robust-build-x64  
        path: artifacts\*  
        retention-days: 30
